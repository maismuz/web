# Generated by Django 5.2 on 2025-07-16 17:39

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome da categoria do evento', max_length=100, unique=True, verbose_name='Nome da Categoria')),
                ('descricao', models.TextField(blank=True, help_text='Descrição da categoria (opcional)', verbose_name='Descrição')),
                ('ativa', models.BooleanField(default=True, help_text='Indica se a categoria está ativa', verbose_name='Ativa')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome ou título do evento', max_length=200, verbose_name='Nome do Evento')),
                ('data_hora', models.DateTimeField(help_text='Data e horário de início do evento', verbose_name='Data e Hora')),
                ('data_fim', models.DateTimeField(blank=True, help_text='Data e horário de fim do evento (opcional)', null=True, verbose_name='Data e Hora de Fim')),
                ('local', models.CharField(help_text='Endereço ou nome do local onde será realizado', max_length=200, verbose_name='Local do Evento')),
                ('descricao', models.TextField(help_text='Descrição detalhada do evento', verbose_name='Descrição')),
                ('organizador', models.CharField(help_text='Nome da pessoa ou empresa organizadora', max_length=100, verbose_name='Organizador')),
                ('cnpj', models.CharField(blank=True, help_text='CNPJ da empresa organizadora (opcional)', max_length=18, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato 00.000.000/0000-00', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('contato', models.CharField(help_text='Telefone, email ou forma de contato', max_length=100, verbose_name='Contato')),
                ('telefone', models.CharField(blank=True, help_text='Número de telefone para contato (opcional)', max_length=20, validators=[django.core.validators.RegexValidator(message='Digite um número de telefone válido', regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')], verbose_name='Telefone')),
                ('email', models.EmailField(blank=True, help_text='E-mail para contato (opcional)', max_length=254, verbose_name='E-mail')),
                ('status', models.CharField(choices=[('pendente', 'Pendente Aprovação'), ('aprovado', 'Aprovado'), ('rejeitado', 'Rejeitado'), ('cancelado', 'Cancelado')], default='pendente', max_length=10, verbose_name='Status')),
                ('rede_social', models.CharField(blank=True, help_text='Link ou usuário da rede social (Instagram, Facebook, etc.)', max_length=200, verbose_name='Rede Social')),
                ('site', models.URLField(blank=True, help_text='Site oficial do evento (opcional)', verbose_name='Site')),
                ('valor_ingresso', models.DecimalField(blank=True, decimal_places=2, help_text='Valor do ingresso (deixe em branco se for gratuito)', max_digits=10, null=True, verbose_name='Valor do Ingresso')),
                ('capacidade', models.PositiveIntegerField(blank=True, help_text='Número máximo de participantes (opcional)', null=True, verbose_name='Capacidade')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='eventos', to='eventuz.categoria', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-data_hora'],
            },
        ),
        migrations.CreateModel(
            name='Midia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('foto', 'Foto'), ('video', 'Vídeo')], max_length=5, verbose_name='Tipo de Mídia')),
                ('titulo', models.CharField(blank=True, help_text='Título ou descrição da mídia (opcional)', max_length=200, verbose_name='Título')),
                ('arquivo', models.FileField(blank=True, help_text='Arquivo de imagem ou vídeo', null=True, upload_to='midias_eventos/', verbose_name='Arquivo')),
                ('url_video', models.URLField(blank=True, help_text='Link do YouTube, Vimeo ou outro serviço (para vídeos)', verbose_name='URL do Vídeo')),
                ('ordem', models.PositiveIntegerField(default=0, help_text='Ordem de exibição da mídia', verbose_name='Ordem')),
                ('data_upload', models.DateTimeField(auto_now_add=True, verbose_name='Data de Upload')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='midias', to='eventuz.evento', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Mídia',
                'verbose_name_plural': 'Mídias',
                'ordering': ['evento', 'ordem', 'id'],
            },
        ),
    ]
