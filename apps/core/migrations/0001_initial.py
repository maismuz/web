# Generated by Django 5.2 on 2025-04-30 17:45

import apps.core.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Perfil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foto', models.ImageField(blank=True, help_text='Foto de perfil do usuário.', null=True, upload_to='perfis/', verbose_name='Foto de Perfil')),
                ('telefone', models.CharField(blank=True, help_text='Número de telefone no formato (XX) XXXXX-XXXX.', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Formato de telefone inválido. Use o formato: (XX) XXXXX-XXXX.', regex='^\\(\\d{2}\\) \\d{5}-\\d{4}$')], verbose_name='Telefone')),
                ('data_nascimento', models.DateField(blank=True, help_text='Data de nascimento do usuário.', null=True, validators=[apps.core.models.validate_date_of_birth], verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(blank=True, help_text='CPF no formato XXX.XXX.XXX-XX.', max_length=14, null=True, unique=True, validators=[apps.core.models.validate_cpf], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, help_text='Número do RG.', max_length=20, null=True, verbose_name='RG')),
                ('endereco', models.CharField(blank=True, help_text='Endereço completo.', max_length=255, null=True, verbose_name='Endereço')),
                ('complemento', models.CharField(blank=True, help_text='Complemento do endereço.', max_length=255, null=True, verbose_name='Complemento')),
                ('bairro', models.CharField(blank=True, help_text='Bairro do endereço.', max_length=100, null=True, verbose_name='Bairro')),
                ('cidade', models.CharField(blank=True, help_text='Cidade do endereço.', max_length=100, null=True, verbose_name='Cidade')),
                ('estado', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Estado do endereço.', max_length=2, null=True, verbose_name='Estado')),
                ('cep', models.CharField(blank=True, help_text='CEP no formato XXXXX-XXX.', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Formato de CEP inválido. Use o formato: XXXXX-XXX.', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('bio', models.TextField(blank=True, help_text='Breve descrição sobre o usuário.', null=True, verbose_name='Biografia')),
                ('profissao', models.CharField(blank=True, help_text='Profissão do usuário.', max_length=100, null=True, verbose_name='Profissão')),
                ('genero', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro'), ('N', 'Prefiro não informar')], help_text='Gênero do usuário.', max_length=1, null=True, verbose_name='Gênero')),
                ('linkedin', models.URLField(blank=True, help_text='URL do perfil no LinkedIn.', null=True, verbose_name='LinkedIn')),
                ('website', models.URLField(blank=True, help_text='URL do website pessoal ou profissional.', null=True, verbose_name='Website')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data da última atualização do perfil.', verbose_name='Data de Atualização')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data de criação do perfil.', verbose_name='Data de Criação')),
                ('usuario', models.OneToOneField(help_text='Usuário vinculado a este perfil.', on_delete=django.db.models.deletion.CASCADE, related_name='perfil', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfis',
                'ordering': ['usuario__username'],
                'indexes': [models.Index(fields=['cpf'], name='core_perfil_cpf_bcb4f2_idx'), models.Index(fields=['usuario'], name='core_perfil_usuario_4bc292_idx')],
            },
        ),
    ]
