# Arquivos compilados / otimizados / DLLs
__pycache__/
*.py[cod]
*$py.class

# Extensões C
*.so

# Distribuição / empacotamento
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#   Normalmente esses arquivos são escritos por um script Python a partir de um modelo
#   antes que o PyInstaller construa o exe, para injetar informações de data/outros dados nele.
*.manifest
*.spec

# Logs do instalador
pip-log.txt
pip-delete-this-directory.txt

# Relatórios de teste unitário / cobertura
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Traduções
*.mo
*.pot

# Arquivos do Django:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Arquivos do Flask:
instance/
.webassets-cache

# Arquivos do Scrapy:
.scrapy

# Documentação Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Para uma biblioteca ou pacote, você pode querer ignorar esses arquivos, já que o código é
#   destinado a rodar em múltiplos ambientes; caso contrário, faça o commit deles:
#.python-version

# pipenv
#   De acordo com pypa/pipenv#598, é recomendado incluir o Pipfile.lock no controle de versão.
#   No entanto, em caso de colaboração, se houver dependências específicas de plataforma ou
#   dependências sem suporte multiplataforma, o pipenv pode instalar dependências que não funcionam
#   ou não instalar todas as dependências necessárias.
#Pipfile.lock

# UV
#   Similar ao Pipfile.lock, geralmente é recomendado incluir o uv.lock no controle de versão.
#   Isso é especialmente recomendado para pacotes binários para garantir a reprodutibilidade, e é mais
#   comumente ignorado para bibliotecas.
#uv.lock

# poetry
#   Similar ao Pipfile.lock, geralmente é recomendado incluir o poetry.lock no controle de versão.
#   Isso é especialmente recomendado para pacotes binários para garantir a reprodutibilidade, e é mais
#   comumente ignorado para bibliotecas.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar ao Pipfile.lock, geralmente é recomendado incluir o pdm.lock no controle de versão.
#pdm.lock
#   O pdm armazena configurações de projeto em .pdm.toml, mas é recomendado não incluí-lo
#   no controle de versão.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; usado por exemplo em github.com/David-OConnor/pyflow e github.com/pdm-project/pdm
__pypackages__/

# Arquivos do Celery
celerybeat-schedule
celerybeat.pid

# Arquivos analisados pelo SageMath
*.sage.py

# Ambientes
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configurações de projeto do Spyder
.spyderproject
.spyproject

# Configurações de projeto do Rope
.ropeproject

# Documentação mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Verificador de tipos Pyre
.pyre/

# Analisador de tipos estáticos pytype
.pytype/

# Símbolos de depuração do Cython
cython_debug/

# PyCharm
#   O modelo específico da JetBrains é mantido em um JetBrains.gitignore separado que pode
#   ser encontrado em https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#   e pode ser adicionado ao gitignore global ou mesclado neste arquivo. Para uma opção mais
#   radical (não recomendada), você pode descomentar o seguinte para ignorar toda a pasta idea.
#.idea/

# Arquivos do Ruff:
.ruff_cache/

# Arquivo de configuração do PyPI
.pypirc

veiculos/